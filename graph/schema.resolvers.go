package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"SampleGraphQL/graph/model"
	"context"
	"log"

	"google.golang.org/api/iterator"
)

// Breads is the resolver for the breads field.
func (r *queryResolver) Breads(ctx context.Context) ([]*model.Bread, error) {
	// Firestore からデータを取得して Bread オブジェクトのスライスを返すロジックを実装
	iter := r.client.Collection("breads").Documents(ctx)
	defer iter.Stop()

	var breads []*model.Bread
	for {
		doc, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			log.Printf("Firestoreデータ取得エラー: %v", err)
			return nil, err
		}

		var bread model.Bread
		if err := doc.DataTo(&bread); err != nil {
			log.Printf("Firestoreデータ変換エラー: %v", err)
			return nil, err
		}
		breads = append(breads, &bread)
	}

	return breads, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
